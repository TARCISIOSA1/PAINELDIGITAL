// src/components/MensagemConversa.jsx
import React, { useEffect, useState, useRef } from "react";
import {
  collection,
  addDoc,
  onSnapshot,
  query,
  orderBy,
  updateDoc,
  doc,
  serverTimestamp,
} from "firebase/firestore";
import { db, storage } from "../firebase";
import { ref, uploadBytes, getDownloadURL } from "firebase/storage";

export default function MensagemConversa({ conversa, usuarioId }) {
  const [mensagens, setMensagens] = useState([]);
  const [texto, setTexto] = useState("");
  const [arquivo, setArquivo] = useState(null);
  const mensagensEndRef = useRef(null);

  useEffect(() => {
    if (!conversa?.id) return;
    const mensagensRef = collection(db, "conversas", conversa.id, "mensagens");
    const q = query(mensagensRef, orderBy("dataEnvio", "asc"));

    const unsubscribe = onSnapshot(q, (snap) => {
      const msgs = snap.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
      setMensagens(msgs);

      // Marca as mensagens como lidas pelo usuÃ¡rio
      msgs.forEach(async (msg) => {
        if (!msg.lidoPor?.includes(usuarioId)) {
          const msgRef = doc(db, "conversas", conversa.id, "mensagens", msg.id);
          await updateDoc(msgRef, {
            lidoPor: [...(msg.lidoPor || []), usuarioId],
          });
        }
      });
    });
    return () => unsubscribe();
  }, [conversa, usuarioId]);

  useEffect(() => {
    mensagensEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [mensagens]);

  async function enviarMensagem() {
    if (!texto.trim() && !arquivo) return;
    const mensagensRef = collection(db, "conversas", conversa.id, "mensagens");

    let urlArquivo = null;
    let nomeArquivo = null;

    if (arquivo) {
      const arquivoRef = ref(
        storage,
        `conversas/${conversa.id}/${Date.now()}_${arquivo.name}`
      );
      await uploadBytes(arquivoRef, arquivo);
      urlArquivo = await getDownloadURL(arquivoRef);
      nomeArquivo = arquivo.name;
    }

    await addDoc(mensagensRef, {
      remetenteId: usuarioId,
      texto: texto.trim() || "",
      dataEnvio: serverTimestamp(),
      lidoPor: [usuarioId],
      anexos: urlArquivo ? [{ nome: nomeArquivo, url: urlArquivo }] : [],
    });

    setTexto("");
    setArquivo(null);

    // Atualiza o Ãºltimo texto e data na conversa
    const conversaRef = doc(db, "conversas", conversa.id);
    await updateDoc(conversaRef, {
      ultimoTexto: texto.trim() || (arquivo ? `[Arquivo: ${nomeArquivo}]` : ""),
      ultimaData: serverTimestamp(),
    });
  }

  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        height: "80vh",
        border: "1px solid #ccc",
        padding: "8px",
        overflowY: "auto",
      }}
    >
      <div
        style={{
          flex: 1,
          overflowY: "auto",
          paddingRight: "10px",
          marginBottom: "10px",
        }}
      >
        {mensagens.length === 0 && <p>Sem mensagens nesta conversa.</p>}
        {mensagens.map((msg) => {
          const ehRemetente = msg.remetenteId === usuarioId;
          return (
            <div
              key={msg.id}
              style={{
                marginBottom: "10px",
                textAlign: ehRemetente ? "right" : "left",
              }}
            >
              <div
                style={{
                  display: "inline-block",
                  backgroundColor: ehRemetente ? "#007bff" : "#e2e2e2",
                  color: ehRemetente ? "white" : "black",
                  padding: "6px 10px",
                  borderRadius: "10px",
                  maxWidth: "70%",
                  wordWrap: "break-word",
                }}
              >
                {msg.texto}
                {msg.anexos && msg.anexos.length > 0 && (
                  <div style={{ marginTop: "6px" }}>
                    {msg.anexos.map((a, i) => (
                      <a
                        key={i}
                        href={a.url}
                        target="_blank"
                        rel="noreferrer"
                        style={{
                          color: ehRemetente ? "#d0eaff" : "#0056b3",
                          display: "block",
                          textDecoration: "underline",
                        }}
                      >
                        ðŸ“Ž {a.nome}
                      </a>
                    ))}
                  </div>
                )}
              </div>
              <div style={{ fontSize: "10px", color: "#666" }}>
                {msg.dataEnvio?.toDate
                  ? msg.dataEnvio.toDate().toLocaleString()
                  : ""}
              </div>
            </div>
          );
        })}
        <div ref={mensagensEndRef} />
      </div>
      <div style={{ display: "flex", alignItems: "center" }}>
        <input
          type="text"
          placeholder="Digite sua mensagem..."
          value={texto}
          onChange={(e) => setTexto(e.target.value)}
          style={{ flex: 1, padding: "8px" }}
          onKeyDown={(e) => {
            if (e.key === "Enter") {
              enviarMensagem();
            }
          }}
        />
        <input
          type="file"
          onChange={(e) => setArquivo(e.target.files[0])}
          style={{ marginLeft: "10px" }}
        />
        <button
          onClick={enviarMensagem}
          style={{
            marginLeft: "10px",
            padding: "8px 15px",
            backgroundColor: "#28a745",
            color: "white",
            border: "none",
            cursor: "pointer",
          }}
        >
          Enviar
        </button>
      </div>
    </div>
  );
}
